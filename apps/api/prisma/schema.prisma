// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventCategory {
  music
  sport
}

enum TransactionStat {
  pending
  paid
  cancel
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  image    String? @db.LongText
  password String
  referral String  @unique
  redeem   Boolean @default(true)
  isActive Boolean @default(false)
  Point    Point[]
}

model Promotor {
  id       Int     @id @default(autoincrement())
  name     String
  email    String @unique
  image    String? @db.LongText
  password String
  isActive Boolean @default(false)
  Event    Event[]
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  location    String
  eventDate   DateTime      @default(now())
  category    EventCategory
  image       String?       @db.LongText
  slug        String        @db.LongText
  desc        String
  address     String        @db.LongText
  city        String
  price       Int
  seats       Int
  eventId     Int
  promotorId  Promotor      @relation(fields: [eventId], references: [id])
  OrderTicket Transaction[]
  Promo       Promo[]
}

model Promo {
  id        Int         @id @default(autoincrement())
  eventId   Int
  event     Event       @relation(fields: [eventId], references: [id])
  PromoItem PromoItem[]
}

model PromoItem {
  id        Int      @id @default(autoincrement())
  name      String
  discount  Int
  startDate DateTime
  endDate   DateTime
  promoId   Int
  promo     Promo    @relation(fields: [promoId], references: [id])
}

model Transaction {
  id          Int             @id @default(autoincrement())
  userId      Int
  eventId     Event           @relation(fields: [userId], references: [id])
  quantity    Int
  promoItemId Int
  totalDisc   Int
  total       Int
  status      TransactionStat
  image       String? 
  dateDate    DateTime        @default(now())
  expiredDate DateTime        @default(now())
}

model Point {
  id          Int      @id @default(autoincrement())
  userId      Int
  point       Int
  expiredDate DateTime
  redeem      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
}
